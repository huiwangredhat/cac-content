name: Sync CaC content to OSCAL
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  # The final version should execute the test whenever a PR is merged to master.
  #pull_request:
  #  types:
  #    - closed
  #  branches:
  #    - master

jobs:
  check-pr-message:
    runs-on: ubuntu-latest
    outputs:
      run_job_check_update: ${{ steps.check_pr.outputs.run_job_check_update }}
    steps:
    - name: Check if the PR comes from the sync of OSCAL content
      id: check_pr
      run: |
        #if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
            echo "PR Title: $PR_TITLE"
            echo "PR Body: $PR_BODY"
          if [[ "$PR_TITLE" == *"Automatic updates from OSCAL content"* ]] || [[ "$PR_BODY" == *"Automatic updates from OSCAL content"* ]]; then
            echo "The PR comes from OSCAL content. The task of Sync CaC content to OSCAL will exit."
            echo "Skipping further checks."
            exit 0
          else
            echo "::set-output name=run_job_check_update::true"
          fi
        #fi
  check-cac-content-update-and-sync-oscal-content:
    runs-on: ubuntu-latest
    needs: check-pr-message
    if: ${{ needs.check-pr-message.outputs.run_job_check_update == 'true' }}
    steps:
      # Step 1: Set up Python 3
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Specify the Python version
      # Step 2: Install Git (if not already installed)
      - name: Install Git
        run: sudo apt-get update && sudo apt-get install -y git
      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython PyYAML deepdiff Jinja2 xmldiff
      # Step 4: Checkout the ComplianceAsCode/content-test-filtering repository
      - name: Checkout (CTF)
        uses: actions/checkout@v4  # Use the latest version of actions/checkout
        with:
          repository: huiwangredhat/content-test-filtering # TODO: updated to ComplianceAsCode/content-test-filtering
          ref: filter_controls_update
          path: ctf
  
      # Step 5: Detect content changes in the PR
      - name: Detect content changes in the PR
        run: |
          # TODO:
          # 1. replace the 13176 to $pr_number
          # 2. replace remote_repo value to ${{ github.server_url }}/${{ github.repository }}
          # 3. replace base value to master
          #python ctf/content_test_filtering.py pr \
          #  --base d2d1faf6db138f649c235af0f701cdfc110a3ffb \
          #  --remote_repo https://github.com/ComplianceAsCode/content \
          #  --verbose --profile --rule --output json 13176 > output.json
          python ctf/content_test_filtering.py pr \
            --base master \
            --remote_repo https://github.com/huiwangredhat/cac-content \
            --verbose --profile --rule --output json ${{ github.event.pull_request.number }} > output.json
      - name: Test if there are no content changes
        run: echo "CTF_OUTPUT_SIZE=$(stat --printf="%s" output.json)" >> $GITHUB_OUTPUT
        id: ctf
      - name: Print changes to content detected if any
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: cat output.json

      # Step 6: Setup the trestle-bot CLI run envrionment
      - name: Checkout CaC repo
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: complytime/cac-content
          ref: jinja_workaround
          path: content
      - name: Checkout OSCAL content repo
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: huiwangredhat/rh-content # TODO: need to update it to OSCAL content repo
          path: oscal-content
          token: ${{ secrets.OSCAL_ACCESS_PAT }} # TODO: The access token should be granted the content write permission
      - name: Checkout trestle-bot repo
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: complytime/trestle-bot
          path: trestle-bot
      - name: Setup trestlebot
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          cd trestle-bot && python3.9 -m venv venv && source venv/bin/activate
          python3.9 -m pip install --no-cache-dir --upgrade pip && python3.9 -m pip install --no-cache-dir pipx \
    && python3 -m pipx install poetry=="1.7.1"
      # Step 7: Get profiles, controls and level mapping
      - name: Get profiles, controls and level mapping
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          cd trestle-bot
          source venv/bin/activate
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10 ocp4 rhv4 rhcos4)
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10)
          RHEL_PRODUCTS=(rhel8)
          for product in "${RHEL_PRODUCTS[@]}"; do
            echo "The product is $product..."
            map_file=$product"_map.json"
            python scripts/get_mappings_profile_control_levels.py $product "../content" > $map_file  2>&1
            cat $map_file
          done
      # Step 8: Get product controls
      - name: Get product controls
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          cd trestle-bot
          source venv/bin/activate
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10 ocp4 rhv4 rhcos4)
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10)
          RHEL_PRODUCTS=(rhel8)
          for product in "${RHEL_PRODUCTS[@]}"; do
            echo "The product $product available controls..."
            controls_file=$product"_controls"
            python scripts/get_product_controls.py $product "../content" > $controls_file  2>&1
            cat $controls_file
          done
      # Step 9: Sync CAC content updates to OSCAL content
      - name: Sync cac content updates to oscal content
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          cd trestle-bot
          source venv/bin/activate
          pr_number="${{ github.event.pull_request.number }}"
          #pr_number="13176"
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10 ocp4 rhv4 rhcos4)
          #RHEL_PRODUCTS=(rhel8 rhel9 rhel10)
          RHEL_PRODUCTS=(rhel8)
          while IFS= read -r line; do
            echo "Handle the CAC updates: $line"
            if [[ "$line" == *controls* ]]; then # Sync the controls updates
              # Sync updated CAC controls to OSCAL catalogs, profiles and component-definition
              CONTROLS=$(echo "$line" | jq -r '.controls[]')
              for updated_control in $CONTROLS; do
                if [[ "$updated_control" == *"SRG-APP"* ]] || [[ "$updated_control" == *"SRG-OS"* ]]; then
                    echo "Ignoring SRG-APP and SRG-OS"
                    continue
                fi
                if [[ "$updated_control" == *"section"* ]]; then
                    echo "Section found, setting policy_id to 'cis_ocp_1_4_0'"
                    policy_id="cis_ocp_1_4_0"
                  else
                    policy_id=$(echo "$updated_control" | cut -f1 -d".")
                fi
                echo "Sync catalogs according to the updated control: $policy_id........" 
                echo "poetry run trestlebot sync-cac-content catalog  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/cac_$pr_number --cac-content-root ../content --cac-policy-id $policy_id --oscal-catalog $policy_id"
                ls ../content
                ls ../content/shared/macros/01-general.jinja
                poetry run trestlebot sync-cac-content catalog  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/cac_$pr_number --cac-content-root ../content --cac-policy-id $policy_id --oscal-catalog $policy_id      
                
                # Check if the updated control impact the product
                # If the product is impacted, then sync the updates
                for product in "${RHEL_PRODUCTS[@]}"; do
                  controls_s=$(cat $product"_controls") # Get all the available controls of the product
                  IFS=' ' read -r -a controls_a <<< "$controls_s"
                  for pc in "${controls_a[@]}"; do
                    if [[ "$pc" == "$policy_id" ]]; then
                      echo "Sync product $product oscal profiles according to the updated control: $policy_id........"
                      echo "poetry run trestlebot sync-cac-content profile  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product --cac-policy-id $policy_id --oscal-catalog $policy_id"
                      poetry run trestlebot sync-cac-content profile  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product --cac-policy-id $policy_id --oscal-catalog $policy_id
                    fi
                  done
                  # Map which CAC profile and OSCAL profile the component-definition will use
                  while IFS= read -r line; do
                    map=$(echo "$line" | sed "s/'/\"/g")
                    map_policy_id=$(echo "$map" | jq -r '.policy_id')
                    if [[ "$map_policy_id" == "$policy_id" ]]; then
                      echo "Sync product $product component-definition according to the updated control $policy_id........"
                      profile=$(echo "$map" | jq -r '.profile_name') # Map the profile
                      levels=$(echo "$map" | jq -r '.levels[]')
                      # Map the CAC profile and the OSCAL profile withe different level
                      for level in "${levels[@]}"; do
                        oscal_profile=$policy_id"-"$level
                        echo $oscal_profile
                        if [[ "$product" == *'rhel'* ]] ; then
                          type="software"
                        else
                          type="service"
                        fi
                        echo "poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile"
                        poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile --debug
                        type="validation"
                        echo "poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile"
                        poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile
                      done
                    fi
                  done < $product"_map.json"
                done
              done
            elif [[ "$line" == *profiles* ]]; then # Sync the profiles updates
              # Sync CAC profile updates to OSCAL profile and component-definition
              PROFILES=$(echo "$line" | jq -r '.profiles[]')
              PRODUCT=$(echo "$line" | jq -r '.product')
              for product in "${RHEL_PRODUCTS[@]}"; do
                if [[ "$PRODUCT" == "$product" ]]; then
                  for updated_profile in $PROFILES; do
                    if [[ "$updated_profile" == *"default"* ]] ; then
                        echo "Ignoring the default profile update"
                        continue
                    fi
                    while IFS= read -r line; do
                      map=$(echo "$line" | sed "s/'/\"/g")
                      profile=$(echo "$map" | jq -r '.profile_name')
                      # Get the policy id and level from the map according to the updated profile
                      if [[ "$updated_profile" == "$profile" ]]; then
                        policy_id=$(echo "$map" | jq -r '.policy_id')
                        echo "Sync product $product profiles according to the updated profile $profile........"
                        echo "poetry run trestlebot sync-cac-content profile  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product --cac-policy-id $policy_id --oscal-catalog $policy_id"
                        poetry run trestlebot sync-cac-content profile  --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product --cac-policy-id $policy_id --oscal-catalog $policy_id
                        levels=$(echo "$map" | jq -r '.levels[]')
                        for level in "${levels[@]}"; do
                          if [[ "$product" == *'rhel'* ]] ; then
                            type="software"
                          else
                            type="service"
                          fi
                          oscal_profile=$policy_id"-"$level
                          echo "Sync product $product component-definition according to the updated profile $updated_profile........"
                          echo "poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile"
                          poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile --debug
                          type="validation"
                          echo "poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile"
                          poetry run trestlebot sync-cac-content component-definition --repo-path ../oscal-content --committer-email test@redhat.com --committer-name test --branch sync_cac/$pr_number --cac-content-root ../content --product $product  --component-definition-type $type --cac-profile $profile  --oscal-profile $oscal_profile
                        done
                      fi
                    done < $product"_map.json"
                  done
                fi
              done
            else # Sync the rules and variables updates
              #TODO: as talked with Marcus, sync rules will updated later
              RULES=$(echo "$line" | jq -r '.rules[]')
              PRODUCT=$(echo "$line" | jq -r '.product')
              echo "Skip the rules sync that only need to update the rule title"
            fi
          done < ../output.json

